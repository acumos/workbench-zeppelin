{
  "paragraphs": [
    {
      "text": "%livy2.pyspark\n\nimport pandas as pd\n\npdf \u003d pd.DataFrame.from_items([(\u0027A\u0027, [1, 2, 3]), (\u0027B\u0027, [4, 5, 6])])\n\npdf.head()",
      "user": "anonymous",
      "dateUpdated": "2018-09-19 18:15:47.101",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "A  B\n0  1  4\n1  2  5\n2  3  6\n\u003cstring\u003e:3: FutureWarning: from_items is deprecated. Please use DataFrame.from_dict(dict(items), ...) instead. DataFrame.from_dict(OrderedDict(items)) may be used to preserve the key order."
          },
          {
            "type": "HTML",
            "data": "\u003chr/\u003eSpark Application Id: application_1527284384465_0014\u003cbr/\u003eSpark WebUI: \u003ca href\u003d\"http://zlp25102.vci.att.com:8088/proxy/application_1527284384465_0014/\"\u003ehttp://zlp25102.vci.att.com:8088/proxy/application_1527284384465_0014/\u003c/a\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1537380947096_1613621592",
      "id": "20180522-180333_681404562",
      "dateCreated": "2018-09-19 18:15:47.096",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%livy2.pyspark\n\nimport pandas as pd\n\ndata \u003d pd.read_csv(\u0027/tmp/pandastest.csv\u0027, header \u003d None)  \n## /tmp/pandastest.cvs exists on local file sytem of execution node mananger, not inside of HDFS\n\nprint data\n",
      "user": "anonymous",
      "dateUpdated": "2018-09-19 18:15:47.102",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "File /tmp/pandastest.csv does not exist"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1537380947102_-1462108396",
      "id": "20180522-201727_1804037827",
      "dateCreated": "2018-09-19 18:15:47.102",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%livy2.pyspark\n\n# convert panda dataframe to pyspark dataframe\n\nimport pandas as pd\nfrom pyspark.sql import SQLContext\nprint sc\ndf \u003d pd.DataFrame([(\"foo\", 1), (\"bar\", 2)], columns\u003d(\"k\", \"v\"))\nprint type(df)\nprint df\nsqlCtx \u003d SQLContext(sc)\nsqlCtx.createDataFrame(df).show()\n",
      "user": "anonymous",
      "dateUpdated": "2018-09-19 18:15:47.102",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cpyspark.context.SparkContext object at 0x275b910\u003e\n\u003cclass \u0027pandas.core.frame.DataFrame\u0027\u003e\n     k  v\n0  foo  1\n1  bar  2\n+---+---+\n|  k|  v|\n+---+---+\n|foo|  1|\n|bar|  2|\n+---+---+"
          },
          {
            "type": "HTML",
            "data": "\u003chr/\u003eSpark Application Id: application_1527284384465_0014\u003cbr/\u003eSpark WebUI: \u003ca href\u003d\"http://zlp25102.vci.att.com:8088/proxy/application_1527284384465_0014/\"\u003ehttp://zlp25102.vci.att.com:8088/proxy/application_1527284384465_0014/\u003c/a\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1537380947102_-369881628",
      "id": "20180522-202352_1053001888",
      "dateCreated": "2018-09-19 18:15:47.102",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%livy2.pyspark\n\n# convert pyspark dataframe to panda dataframe\n\nfrom pyspark.sql import SQLContext\nsqlContext \u003d SQLContext(sc)\n\ndf \u003d sqlContext.read.json(\"/tmp/zips.json\")\n\n# Displays the content of the DataFrame to stdout\ndf.show()\n\ndf.printSchema()\n\nprint(type(df))\n\nprint(\"before tranform to panda\")\n\npandaDF \u003d df.toPandas()\nprint pandaDF\n\nprint(type(pandaDF))\n",
      "user": "anonymous",
      "dateUpdated": "2018-09-19 18:15:47.103",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-----+---------------+--------------------+-----+-----+\n|  _id|           city|                 loc|  pop|state|\n+-----+---------------+--------------------+-----+-----+\n|01001|         AGAWAM|[-72.622739, 42.0...|15338|   MA|\n|01002|        CUSHMAN|[-72.51565, 42.37...|36963|   MA|\n|01005|          BARRE|[-72.108354, 42.4...| 4546|   MA|\n|01007|    BELCHERTOWN|[-72.410953, 42.2...|10579|   MA|\n|01008|      BLANDFORD|[-72.936114, 42.1...| 1240|   MA|\n|01010|      BRIMFIELD|[-72.188455, 42.1...| 3706|   MA|\n|01011|        CHESTER|[-72.988761, 42.2...| 1688|   MA|\n|01012|   CHESTERFIELD|[-72.833309, 42.3...|  177|   MA|\n|01013|       CHICOPEE|[-72.607962, 42.1...|23396|   MA|\n|01020|       CHICOPEE|[-72.576142, 42.1...|31495|   MA|\n|01022|   WESTOVER AFB|[-72.558657, 42.1...| 1764|   MA|\n|01026|     CUMMINGTON|[-72.905767, 42.4...| 1484|   MA|\n|01027|      MOUNT TOM|[-72.679921, 42.2...|16864|   MA|\n|01028|EAST LONGMEADOW|[-72.505565, 42.0...|13367|   MA|\n|01030|  FEEDING HILLS|[-72.675077, 42.0...|11985|   MA|\n|01031|   GILBERTVILLE|[-72.198585, 42.3...| 2385|   MA|\n|01032|         GOSHEN|[-72.844092, 42.4...|  122|   MA|\n|01033|         GRANBY|[-72.520001, 42.2...| 5526|   MA|\n|01034|        TOLLAND|[-72.908793, 42.0...| 1652|   MA|\n|01035|         HADLEY|[-72.571499, 42.3...| 4231|   MA|\n+-----+---------------+--------------------+-----+-----+\nonly showing top 20 rows\n\nroot\n |-- _id: string (nullable \u003d true)\n |-- city: string (nullable \u003d true)\n |-- loc: array (nullable \u003d true)\n |    |-- element: double (containsNull \u003d true)\n |-- pop: long (nullable \u003d true)\n |-- state: string (nullable \u003d true)\n\n\u003cclass \u0027pyspark.sql.dataframe.DataFrame\u0027\u003e\nbefore tranform to panda\n         _id             city                       loc    pop state\n0      01001           AGAWAM   [-72.622739, 42.070206]  15338    MA\n1      01002          CUSHMAN    [-72.51565, 42.377017]  36963    MA\n2      01005            BARRE   [-72.108354, 42.409698]   4546    MA\n3      01007      BELCHERTOWN   [-72.410953, 42.275103]  10579    MA\n4      01008        BLANDFORD   [-72.936114, 42.182949]   1240    MA\n5      01010        BRIMFIELD   [-72.188455, 42.116543]   3706    MA\n6      01011          CHESTER   [-72.988761, 42.279421]   1688    MA\n7      01012     CHESTERFIELD    [-72.833309, 42.38167]    177    MA\n8      01013         CHICOPEE   [-72.607962, 42.162046]  23396    MA\n9      01020         CHICOPEE   [-72.576142, 42.176443]  31495    MA\n10     01022     WESTOVER AFB   [-72.558657, 42.196672]   1764    MA\n11     01026       CUMMINGTON   [-72.905767, 42.435296]   1484    MA\n12     01027        MOUNT TOM   [-72.679921, 42.264319]  16864    MA\n13     01028  EAST LONGMEADOW   [-72.505565, 42.067203]  13367    MA\n14     01030    FEEDING HILLS    [-72.675077, 42.07182]  11985    MA\n15     01031     GILBERTVILLE   [-72.198585, 42.332194]   2385    MA\n16     01032           GOSHEN   [-72.844092, 42.466234]    122    MA\n17     01033           GRANBY   [-72.520001, 42.255704]   5526    MA\n18     01034          TOLLAND   [-72.908793, 42.070234]   1652    MA\n19     01035           HADLEY    [-72.571499, 42.36062]   4231    MA\n20     01036          HAMPDEN   [-72.431823, 42.064756]   4709    MA\n21     01038         HATFIELD    [-72.616735, 42.38439]   3184    MA\n22     01039      HAYDENVILLE   [-72.703178, 42.381799]   1387    MA\n23     01040          HOLYOKE   [-72.626193, 42.202007]  43704    MA\n24     01050       HUNTINGTON   [-72.873341, 42.265301]   2084    MA\n25     01053            LEEDS   [-72.703403, 42.354292]   1350    MA\n26     01054         LEVERETT    [-72.499334, 42.46823]   1748    MA\n27     01056           LUDLOW   [-72.471012, 42.172823]  18820    MA\n28     01057           MONSON   [-72.319634, 42.101017]   8194    MA\n29     01060         FLORENCE   [-72.654245, 42.324662]  27939    MA\n...      ...              ...                       ...    ...   ...\n29437  99777           TANANA  [-152.103747, 65.156483]    345    AK\n29438  99778           TELLER    [-166.3833, 65.240164]    260    AK\n29439  99780           BORDER  [-142.523046, 63.435022]   1805    AK\n29440  99781          VENETIE  [-146.413723, 67.010446]    184    AK\n29441  99782       WAINWRIGHT  [-160.012532, 70.620064]    492    AK\n29442  99783            WALES  [-168.520521, 65.688212]    341    AK\n29443  99784   WHITE MOUNTAIN   [-163.42185, 64.702791]    194    AK\n29444  99785   BREVIG MISSION  [-166.478578, 65.334187]    198    AK\n29445  99786           AMBLER   [-156.455652, 67.46951]      8    AK\n29446  99788      CHALKYITSIK     [-143.638121, 66.719]     99    AK\n29447  99789          NUIQSUT  [-150.997119, 70.192737]    354    AK\n29448  99801           JUNEAU  [-134.529429, 58.362767]  24947    AK\n29449  99820           ANGOON  [-134.371052, 57.569832]   1002    AK\n29450  99824          DOUGLAS  [-134.395041, 58.275597]   1802    AK\n29451  99826         GUSTAVUS   [-135.761542, 58.42835]    258    AK\n29452  99827           HAINES  [-135.542032, 59.251886]   2246    AK\n29453  99829           HOONAH  [-135.558435, 58.032237]   1670    AK\n29454  99833       PETERSBURG  [-133.160683, 56.827134]   4253    AK\n29455  99835            SITKA  [-135.316569, 57.051436]   8638    AK\n29456  99840          SKAGWAY  [-135.301794, 59.468471]    692    AK\n29457  99901        KETCHIKAN  [-131.683175, 55.372028]  13886    AK\n29458  99919       THORNE BAY   [-132.513815, 55.66086]    744    AK\n29459  99921            CRAIG   [-133.117081, 55.47317]   1398    AK\n29460  99922         HYDABURG  [-132.633175, 55.137406]    891    AK\n29461  99923            HYDER  [-130.124915, 55.925867]    116    AK\n29462  99925          KLAWOCK  [-133.055503, 55.552611]    851    AK\n29463  99926       METLAKATLA  [-131.579001, 55.121491]   1469    AK\n29464  99927      POINT BAKER  [-133.376372, 56.307858]    426    AK\n29465  99929         WRANGELL  [-132.352918, 56.433524]   2573    AK\n29466  99950        KETCHIKAN   [-133.18479, 55.942471]    422    AK\n\n[29467 rows x 5 columns]\n\u003cclass \u0027pandas.core.frame.DataFrame\u0027\u003e"
          },
          {
            "type": "HTML",
            "data": "\u003chr/\u003eSpark Application Id: application_1527284384465_0014\u003cbr/\u003eSpark WebUI: \u003ca href\u003d\"http://zlp25102.vci.att.com:8088/proxy/application_1527284384465_0014/\"\u003ehttp://zlp25102.vci.att.com:8088/proxy/application_1527284384465_0014/\u003c/a\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1537380947103_677362516",
      "id": "20180522-202706_146372893",
      "dateCreated": "2018-09-19 18:15:47.103",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sh\n",
      "user": "anonymous",
      "dateUpdated": "2018-09-19 18:15:47.104",
      "config": {
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sh",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1537380947103_-1002179398",
      "id": "20180522-180951_259952105",
      "dateCreated": "2018-09-19 18:15:47.103",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Spark2 ML Examples/Spark2 ML - pyspark - Panda",
  "id": "2DR3HX31Y",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "livy2:shared_process": [],
    "sh:shared_process": [],
    "livy:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}